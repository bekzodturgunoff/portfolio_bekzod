---
// LanguageSwitcher.astro - Simple language switcher
const languages = [
  { code: 'en', label: 'EN' },
  { code: 'ru', label: 'RU' },
  { code: 'ko', label: 'KO' },
];
---

<div class="relative language-switcher">
  <button
    type="button"
    id="lang-button"
    aria-label="Change language"
    aria-haspopup="true"
    aria-expanded="false"
    class="h-9 px-3 inline-flex items-center justify-center gap-1.5 rounded-full border border-black/10 dark:border-white/10 hover:bg-black/5 dark:hover:bg-white/10 focus:outline-none focus-visible:ring-2 focus-visible:ring-black/30 dark:focus-visible:ring-white/30 transition-all text-sm font-medium"
  >
    <span id="current-lang">EN</span>
    <svg class="w-3 h-3 transition-transform" id="lang-chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
    </svg>
  </button>

  <div
    id="lang-dropdown"
    class="absolute right-0 mt-2 w-24 rounded-lg border border-black/10 dark:border-white/10 bg-white dark:bg-neutral-900 shadow-lg opacity-0 pointer-events-none transition-all origin-top-right scale-95"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="lang-button"
  >
    {languages.map((lang) => (
      <button
        type="button"
        data-lang={lang.code}
        class="lang-option w-full px-4 py-2 text-left text-sm hover:bg-black/5 dark:hover:bg-white/10 transition-colors first:rounded-t-lg last:rounded-b-lg"
        role="menuitem"
      >
        {lang.label}
      </button>
    ))}
  </div>
</div>

<script>
  const button = document.getElementById('lang-button');
  const dropdown = document.getElementById('lang-dropdown');
  const currentLang = document.getElementById('current-lang');
  const chevron = document.getElementById('lang-chevron');
  const options = document.querySelectorAll('.lang-option');

  // Detect current language from URL
  const path = window.location.pathname;
  let detectedLang = 'en';
  if (path.startsWith('/ru')) detectedLang = 'ru';
  else if (path.startsWith('/ko')) detectedLang = 'ko';
  
  if (currentLang) {
    currentLang.textContent = detectedLang.toUpperCase();
  }

  // Toggle dropdown
  let isOpen = false;
  button?.addEventListener('click', () => {
    isOpen = !isOpen;
    if (dropdown && chevron) {
      if (isOpen) {
        dropdown.classList.remove('opacity-0', 'pointer-events-none', 'scale-95');
        dropdown.classList.add('opacity-100', 'pointer-events-auto', 'scale-100');
        chevron.style.transform = 'rotate(180deg)';
        button.setAttribute('aria-expanded', 'true');
      } else {
        dropdown.classList.add('opacity-0', 'pointer-events-none', 'scale-95');
        dropdown.classList.remove('opacity-100', 'pointer-events-auto', 'scale-100');
        chevron.style.transform = 'rotate(0deg)';
        button.setAttribute('aria-expanded', 'false');
      }
    }
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!button?.contains(e.target as Node) && !dropdown?.contains(e.target as Node)) {
      isOpen = false;
      if (dropdown && chevron) {
        dropdown.classList.add('opacity-0', 'pointer-events-none', 'scale-95');
        dropdown.classList.remove('opacity-100', 'pointer-events-auto', 'scale-100');
        chevron.style.transform = 'rotate(0deg)';
        button?.setAttribute('aria-expanded', 'false');
      }
    }
  });

  // Handle language selection
  options.forEach((option) => {
    option.addEventListener('click', () => {
      const lang = option.getAttribute('data-lang');
      if (lang) {
        // Navigate to the appropriate language route
        if (lang === 'en') {
          window.location.href = '/';
        } else {
          window.location.href = `/${lang}/`;
        }
      }
    });
  });
</script>
