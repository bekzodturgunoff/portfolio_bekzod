---
import { languages, defaultLang } from '../i18n';

interface Props {
  lang?: string;
}

const { lang } = Astro.props;
const currentLang = lang || defaultLang;

const entries = Object.entries(languages);
const getPath = (code: string) => (code === defaultLang ? '/' : `/${code}`);
---
<div class="relative inline-flex" data-lang-switcher data-current={currentLang}>
  <button
    type="button"
    aria-haspopup="listbox"
    aria-expanded="false"
    data-lang-trigger
    class="inline-flex min-w-[4.5rem] items-center justify-between gap-2 rounded-md border border-black/10 bg-white/90 px-3 py-1.5 text-[11px] font-semibold uppercase tracking-[0.28em] text-neutral-700 shadow-sm shadow-black/5 transition-all focus:outline-none focus-visible:ring-2 focus-visible:ring-neutral-500/40 dark:border-white/10 dark:bg-neutral-900/80 dark:text-neutral-200 dark:focus-visible:ring-white/30"
  >
    <span data-selected-label>{currentLang.toUpperCase()}</span>
    <svg
      class="h-3.5 w-3.5 text-neutral-500 transition-transform duration-200 dark:text-neutral-300"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 20 20"
      fill="currentColor"
      aria-hidden="true"
      data-chevron
    >
      <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.293l3.71-4.06a.75.75 0 011.08 1.04l-4.25 4.657a.75.75 0 01-1.08 0L5.21 8.27a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
    </svg>
  </button>
  <div
    role="listbox"
    data-lang-menu
    class="absolute top-full right-0 z-20 mt-2 hidden min-w-[9rem] rounded-md border border-black/10 bg-white/95 p-1 shadow-xl backdrop-blur-sm dark:border-white/10 dark:bg-neutral-900/95"
  >
    <ul class="space-y-1">
      {entries.map(([code, label]) => (
        <li>
          <a
            href={getPath(code)}
            role="option"
            aria-selected={currentLang === code}
            data-lang-option
            data-lang={code}
            data-code={code.toUpperCase()}
            data-label={label}
            class:list={[
              "block rounded px-3 py-1.5 text-[11px] font-semibold uppercase tracking-[0.28em] transition-colors",
              currentLang === code
                ? "bg-black/[0.05] text-brand-600 dark:bg-white/[0.08] dark:text-brand-400"
                : "text-neutral-700 hover:bg-black/[0.06] dark:text-neutral-200 dark:hover:bg-white/[0.12]",
            ]}
          >
            <span class="sm:hidden">{code.toUpperCase()}</span>
            <span class="hidden sm:inline">{label}</span>
          </a>
        </li>
      ))}
    </ul>
  </div>
</div>

<script is:inline>
  const initLanguageSwitcher = () => {
    const containers = document.querySelectorAll('[data-lang-switcher]');

    containers.forEach((container) => {
      if (container.dataset.bound === 'true') return;
      container.dataset.bound = 'true';

      const trigger = container.querySelector('[data-lang-trigger]');
      const menu = container.querySelector('[data-lang-menu]');
      const label = container.querySelector('[data-selected-label]');
      const chevron = container.querySelector('[data-chevron]');
      const links = menu?.querySelectorAll('[data-lang-option]');
      const current = container.getAttribute('data-current');

      if (!trigger || !menu || !label || !links?.length) return;

      const media = window.matchMedia('(max-width: 639px)');

      const applyLabel = () => {
        const active = menu.querySelector('[aria-selected="true"]') || menu.querySelector('[data-lang-option]');
        if (!active) return;
        const code = active.getAttribute('data-code');
        const full = active.getAttribute('data-label');
        label.textContent = media.matches ? (code || full || '') : (full || code || '');
      };

      const closeMenu = () => {
        trigger.setAttribute('aria-expanded', 'false');
        menu.classList.add('hidden');
        if (chevron) chevron.style.transform = 'rotate(0deg)';
      };

      const openMenu = () => {
        trigger.setAttribute('aria-expanded', 'true');
        menu.classList.remove('hidden');
        if (chevron) chevron.style.transform = 'rotate(180deg)';
      };

      const closeAllMenus = () => {
        document.querySelectorAll('[data-lang-switcher]').forEach((wrapper) => {
          const otherMenu = wrapper.querySelector('[data-lang-menu]');
          const otherTrigger = wrapper.querySelector('[data-lang-trigger]');
          const otherChevron = wrapper.querySelector('[data-chevron]');
          if (!otherMenu || !otherTrigger) return;
          otherMenu.classList.add('hidden');
          otherTrigger.setAttribute('aria-expanded', 'false');
          if (otherChevron) otherChevron.style.transform = 'rotate(0deg)';
        });
      };

      const toggleMenu = (event) => {
        event.stopPropagation();
        const expanded = trigger.getAttribute('aria-expanded') === 'true';
        if (expanded) closeMenu();
        else {
          closeAllMenus();
          openMenu();
        }
      };

      trigger.addEventListener('click', toggleMenu);

      trigger.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          closeMenu();
          trigger.focus();
        }
      });

      document.addEventListener('click', (event) => {
        if (!container.contains(event.target)) {
          closeMenu();
        }
      });

      links.forEach((link) => {
        const lang = link.getAttribute('data-lang');
        if (lang === current) {
          link.setAttribute('aria-selected', 'true');
        }

        link.addEventListener('click', (event) => {
          event.preventDefault();
          const href = link.getAttribute('href');
          if (!href) {
            closeMenu();
            return;
          }
          if (link.getAttribute('aria-selected') === 'true') {
            closeMenu();
            return;
          }

          document.querySelectorAll('[data-lang-option][aria-selected="true"]').forEach((active) => {
            active.setAttribute('aria-selected', 'false');
          });
          link.setAttribute('aria-selected', 'true');
          applyLabel();
          closeMenu();

          const isDark = document.documentElement.classList.contains('dark');
          try {
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
          } catch {}

          if (href === window.location.pathname) return;
          window.location.href = href;
        });
      });

      applyLabel();

      if (typeof media.addEventListener === 'function') {
        media.addEventListener('change', applyLabel);
      } else if (typeof media.addListener === 'function') {
        media.addListener(applyLabel);
      }
    });
  };

  const ready = () => initLanguageSwitcher();

  if (document.readyState !== 'loading') {
    ready();
  } else {
    document.addEventListener('DOMContentLoaded', ready, { once: true });
  }

  document.addEventListener('astro:page-load', initLanguageSwitcher);
</script>